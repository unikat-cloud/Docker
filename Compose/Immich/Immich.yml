name: immich # Name des Projekts

services:
  # Dienst: Immich-Server
  immich-server:
    # Name des Container
    container_name: immich_server
    # Verwendetes Docker-Image (neueste Version)
    image: ghcr.io/immich-app/immich-server:latest
    # Hardwarebeschleunigung für Transkodierung (auskommentiert)
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    # Volume-Zuordnung
    volumes:
      # Medienbibliothek-Pfad (nicht bearbeiten, siehe .env)
      - library:/usr/src/app/upload
      # Zeitzone des Hosts (schreibgeschützt)
      - /etc/localtime:/etc/localtime:ro
    # Port-Zuordnung
    ports:
      - '2283:2283'
    # Abhängigkeiten
    depends_on:
      - redis
      - database
    # Neustartrichtlinie
    restart: always
    # Healthcheck (deaktiviert)
    healthcheck:
      disable: false

  # Dienst: Immich-Machine-Learning
  immich-machine-learning:
    # Name des Containers
    container_name: immich_machine_learning
    # Hardwarebeschleunigung für ML (auskommentiert, siehe Image-Tag)
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    # Verwendetes Immich-Machine-Learning-Image (neueste Version)
    image: ghcr.io/immich-app/immich-machine-learning:latest
    # Hardwarebeschleunigung für Inferenz (auskommentiert)
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    # Volume-Zuordnung
    volumes:
      - model-cache:/cache
    # Neustartrichtlinie
    restart: always
    # Healthcheck (deaktiviert)
    healthcheck:
      disable: false

  # Dienst: Redis
  redis:
    # Name des Container
    container_name: immich_redis
    # Verwendetes Redis-Image
    image: docker.io/redis:latest
    # Healthcheck
    healthcheck:
      test: redis-cli ping || exit 1
    # Neustartrichtlinie
    restart: always

  # Dienst: Datenbank (PostgreSQL)
  database:
    # Name des Containers
    container_name: immich_postgres
    # Verwendetes Datenbank-Image
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    # Umgebungsvariablen
    environment:
      # Datenbank-Passwort
      POSTGRES_PASSWORD: DB_PASSWORD
      # Datenbank-Benutzername
      POSTGRES_USER: DB_USERNAME
      # Datenbankname
      POSTGRES_DB: DB_DATABASE_NAME
      # Initialisierungsargumente für die Datenbank
      POSTGRES_INITDB_ARGS: '--data-checksums'
    # Volume-Zuordnung
    volumes:
      # Datenbankdaten-Pfad (nicht bearbeiten, siehe .env)
      - dbdata:/var/lib/postgresql/data
    # Healthcheck
    healthcheck:
      test: >-
        pg_isready --dbname="POSTGRES_DB" --username="POSTGRES_USER" || exit 1;
        Chksum="$$(psql --dbname="POSTGRES_DB" --username="POSTGRES_USER" --tuples-only --no-align
        --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
        echo "checksum failure count is $$Chksum";
        [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    # Befehl
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on
    # Neustartrichtlinie
    restart: always

# Definierte Volumes
volumes:
  # Volume für Modell-Cache
  model-cache:
  # Volume für Medienbibliothek
  library:
  # Volume für Datenbankdaten
  dbdata: